#summary TODO-list for this project

= TODO-list for this project =

Here are some features that we would like to implement in the BeIT Memcached client:

=== Parallell multi-get ===

Currently, the multi-get method builds a list of servers it needs to talk to, and then retrieves the objects sequentially. Using the asynchronous socket methods with callbacks, it should be possible to parallellize this, which would further speed up the client.

=== Asynchronous Connect ===

Another use of the asynchronous socket methods is to perform the socket connections asynchronously, which should allow us to check the connection timeout properly.

=== Automatic Configuration ===

When calling the GetInstance method and there is not instance configured with the given name, the client should check the standard configuration files (app.config/web.config) for  configuration info and create and return an instance based on that. It should be possible to parse custom configuration sections without creating a custom ConfigurationSection class.

=== Better Stats ===

The Stats method should take a key or a hash, and return the stats result from that specific server.

=== Better Flush All ===

The memcached command "flush_all" can accept an optional time parameter. If specified, it will delay the flush command. This can be used to stagger the flushing across multiple servers, which is useful since flushing all servers at the same time would put a lot of pressure on the data sources as the entire cache is repopulated at once.

There should be a `public bool FlushAll(TimeSpan time)` method which would result in the following commands being sent:

{{{
server1: flush_all 0
server2: flush_all <time>
server3: flush_all <time * 2>
server4: flush_all <time * 3>
...etc
}}}